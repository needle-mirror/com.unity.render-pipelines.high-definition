#include "Packages/com.unity.render-pipelines.high-definition/Runtime/PostProcessing/Shaders/MotionBlurCommon.hlsl"

#pragma kernel VelPreppingCS VELOCITY_PREPPING

#pragma only_renderers d3d11 ps4 xboxone vulkan metal switch


#define SKIP_PREPPING_IF_NOT_NEEDED defined(SUPPORTS_WAVE_INTRINSICS)



// We use polar coordinates. This has the advantage of storing the length separately and we'll need the length several times.
float2 EncodeVelocity(float2 velocity)
{
    float velLength = length(velocity);
    if (velLength < 0.0001)
    {
        return 0.0;
    }
    else
    {
        float theta = atan2(velocity.y, velocity.x)  * (0.5 / PI) + 0.5;
        return float2(velLength, theta);
    }
}

float2 ClampVelocity(float2 velocity, float maxVelocity)
{
    float len = length(velocity);
    return (len > 0.0) ? min(len, maxVelocity) * (velocity * rcp(len)) : 0.0;
}

// Prep velocity so that the velocity due to rotation is clamped more lightly
float2 ComputeVelocity(PositionInputs posInput, float2 sampledVelocity)
{
    float4 worldPos = float4(posInput.positionWS, 1.0);
    float4 prevPos = worldPos;

    float4 prevClipPos = mul(_PrevVPMatrixNoTranslation, prevPos);
    float4 curClipPos = mul(UNITY_MATRIX_UNJITTERED_VP, worldPos);

    float2 previousPositionCS = prevClipPos.xy / prevClipPos.w;
    float2 positionCS = curClipPos.xy / curClipPos.w;

    float2 velCameraRot = ((positionCS - previousPositionCS).xy);
#if UNITY_UV_STARTS_AT_TOP
    velCameraRot.y = -velCameraRot.y;
#endif

    velCameraRot.x = velCameraRot.x * _TextureWidthScaling.y;
    velCameraRot *= 0.5f;
    float2 velWithoutRot = sampledVelocity - velCameraRot;
    velCameraRot *= _MotionBlurIntensity;

    float2 clampVelRot = ClampVelocity(velCameraRot, _CameraRotationClampNDC);

    return ClampVelocity(velWithoutRot* _MotionBlurIntensity, _MotionBlurMaxVelocity) + clampVelRot;
}

[numthreads(8, 8,1)]
void VelPreppingCS(uint3 dispatchThreadId : SV_DispatchThreadID)
{
    UNITY_STEREO_ASSIGN_COMPUTE_EYE_INDEX(dispatchThreadId.z);

    float3 velAndDepth = 0.0f;
    float4 velocityBufferSample = LOAD_TEXTURE2D_X(_CameraMotionVectorsTexture, dispatchThreadId.xy);
    // if we have a value > 1.0f, it means we have selected the "no motion option", hence we force velocity 0. 
    bool forceNoMotion = PixelSetAsNoMotionVectors(velocityBufferSample);

    float2 velocity;
    DecodeVelocity(velocityBufferSample, velocity);
    float depth = LoadCameraDepth(dispatchThreadId.xy);

    if ( !forceNoMotion
#if SKIP_PREPPING_IF_NOT_NEEDED
        || WaveActiveAnyTrue(dot(velocity, velocity) * _ScreenMagnitudeSq > _MinVelThresholdSq)
#endif
        )
    {
        
        PositionInputs posInput = GetPositionInput_Stereo(dispatchThreadId.xy, _ScreenSize.zw, depth, UNITY_MATRIX_I_VP, UNITY_MATRIX_V, unity_StereoEyeIndex);

        float2 finalVelocity = ComputeVelocity(posInput, velocity);
        velAndDepth.xy = EncodeVelocity(finalVelocity);
        velAndDepth.z = posInput.linearDepth;
    }
    else
    {
        velAndDepth.z = LinearEyeDepth(depth, _ZBufferParams);
    }

    // Compute linear depth
    _VelocityAndDepth[COORD_TEXTURE2D_X(dispatchThreadId.xy)] = velAndDepth;
}
