// Temporal Filtering kernels
#pragma kernel AOCopyTAAHistory
#pragma kernel AOApplyTAA

#pragma kernel AOBilateralFilterH   AOBilateralFilter=AOBilateralFilterH
#pragma kernel AOBilateralFilterV   AOBilateralFilter=AOBilateralFilterV  FINAL_PASS

#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/NormalBuffer.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RaytracingSampling.hlsl"
#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Color.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Builtin/BuiltinData.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/PostProcessing/Shaders/TemporalAntialiasing.hlsl"

// Tile size of this compute
#define AMBIENT_OCCLUSION_TILE_SIZE 8

// Input filter DATA
TEXTURE2D_X(_DepthTexture);
RW_TEXTURE2D_X(float, _AOHistorybufferRW);
TEXTURE2D_X(_DenoiseInputTexture);
int _RaytracingDenoiseRadius;

// Output Filter Data
RW_TEXTURE2D_X(float4, _DenoiseOutputTextureRW);

[numthreads(AMBIENT_OCCLUSION_TILE_SIZE, AMBIENT_OCCLUSION_TILE_SIZE, 1)]
void AOCopyTAAHistory(uint2 groupThreadId : SV_GroupThreadID, uint2 groupId : SV_GroupID)
{
    // Fetch the current pixel coordinate
    uint2 centerCoord = groupId * AMBIENT_OCCLUSION_TILE_SIZE + groupThreadId;
    centerCoord.x = centerCoord.x + (unity_StereoEyeIndex * _ScreenSize.x);

    // Get the previous value and current value
    float historyValue = LOAD_TEXTURE2D_X(_AOHistorybufferRW, centerCoord);
    float currentValue = LOAD_TEXTURE2D_X(_DenoiseInputTexture, centerCoord).x;

    // Merge them into the previous buffer
    _DenoiseOutputTextureRW[COORD_TEXTURE2D_X(centerCoord)] = float4(currentValue, historyValue, 0, 0);
}

[numthreads(AMBIENT_OCCLUSION_TILE_SIZE, AMBIENT_OCCLUSION_TILE_SIZE, 1)]
void AOApplyTAA(uint2 groupThreadId : SV_GroupThreadID, uint2 groupId : SV_GroupID)
{
    // Fetch the current pixel coordinate
    uint2 centerCoord = groupId * AMBIENT_OCCLUSION_TILE_SIZE + groupThreadId;
    centerCoord.x = centerCoord.x + (unity_StereoEyeIndex * _ScreenSize.x);

    float depth = LOAD_TEXTURE2D_X(_DepthTexture, centerCoord).r;
    PositionInputs posInputs = GetPositionInput_Stereo(centerCoord, _ScreenSize.zw, depth, UNITY_MATRIX_I_VP, UNITY_MATRIX_V, unity_StereoEyeIndex);

    float2 closest = GetClosestFragment(posInputs);

    float2 velocity;
    DecodeMotionVector(LOAD_TEXTURE2D_X(_CameraMotionVectorsTexture, closest), velocity);
    float velocityLength = length(velocity);

    float2 uv = posInputs.positionNDC;

    float color = Fetch4(_DenoiseInputTexture, uv, 0.0, _ScreenToTargetScale.xy).x;
    float history = Fetch4(_DenoiseInputTexture, posInputs.positionNDC - velocity, 0.0, _ScreenToTargetScaleHistory.xy).y;
    float topLeft = Fetch4(_DenoiseInputTexture, uv, -RADIUS, _ScreenToTargetScale.xy).x;
    float bottomRight = Fetch4(_DenoiseInputTexture, uv, RADIUS, _ScreenToTargetScale.xy).x;

    float corners = 4.0 * (topLeft + bottomRight) - 2.0 * color;

    color = clamp(color, 0.0, CLAMP_MAX);

    float average = MapPerChannel((corners + color) / 7.0);

    topLeft = MapPerChannel(topLeft);
    bottomRight = MapPerChannel(bottomRight);
    color = MapPerChannel(color);

    float colorLuma = color;
    float averageLuma = average;
    float nudge = lerp(4.0, 0.25, saturate(velocityLength * 100.0)) * abs(averageLuma - colorLuma);

    float minimum = min(bottomRight, topLeft) - nudge;
    float maximum = max(topLeft, bottomRight) + nudge;

    history = MapPerChannel(history);

    // Clip history samples
    history = clamp(history, minimum, maximum);

    // Blend color & history
    // Feedback weight from unbiased luminance diff (Timothy Lottes)
    float historyLuma = history;
    float diff = abs(colorLuma - historyLuma) / Max3(colorLuma, historyLuma, 0.2);
    float weight = 1.0 - diff;
    float feedback = lerp(FEEDBACK_MIN, FEEDBACK_MAX, weight * weight);

    color = UnmapPerChannel(lerp(color, history, feedback));
    color = clamp(color, 0.0, CLAMP_MAX);
    
    _AOHistorybufferRW[COORD_TEXTURE2D_X(centerCoord)] = color;
    _DenoiseOutputTextureRW[COORD_TEXTURE2D_X(centerCoord)] = float4(color, color, color, 1.0);
}

// ----------------------------------------------------------------------------
// Denoising Kernel
// ----------------------------------------------------------------------------

// Couple helper functions
float sqr(float value)
{
    return value * value;
}
float gaussian(float radius, float sigma)
{
    return exp(-sqr(radius / sigma));
}

// Bilateral filter parameters
#define NORMAL_WEIGHT   1.0
#define PLANE_WEIGHT    1.0
#define DEPTH_WEIGHT    1.0

struct BilateralData
{
    float3 position;
    float  z;
    float3 normal;
};

BilateralData TapBilateralData(uint2 coordSS)
{
    BilateralData key;
    PositionInputs posInput;

    if (DEPTH_WEIGHT > 0.0 || PLANE_WEIGHT > 0.0)
    {
        posInput.deviceDepth = LOAD_TEXTURE2D_X(_DepthTexture, coordSS).r;
        key.z = Linear01Depth(posInput.deviceDepth, _ZBufferParams);
    }

    if (PLANE_WEIGHT > 0.0)
    {
        posInput = GetPositionInput_Stereo(coordSS, _ScreenSize.zw, posInput.deviceDepth,
                                           UNITY_MATRIX_I_VP, UNITY_MATRIX_V, unity_StereoEyeIndex);
        key.position = posInput.positionWS;
    }

    if ((NORMAL_WEIGHT > 0.0) || (PLANE_WEIGHT > 0.0))
    {
        NormalData normalData;
        const float4 normalBuffer = LOAD_TEXTURE2D_X(_NormalBufferTexture, coordSS);
        DecodeFromNormalBuffer(normalBuffer, coordSS, normalData);
        key.normal = normalData.normalWS;
    }

    return key;
}

float ComputeBilateralWeight(BilateralData center, BilateralData tap)
{
    float depthWeight    = 1.0;
    float normalWeight   = 1.0;
    float planeWeight    = 1.0;

    if (DEPTH_WEIGHT > 0.0)
    {
        depthWeight = max(0.0, 1.0 - abs(tap.z - center.z) * DEPTH_WEIGHT);
    }

    if (NORMAL_WEIGHT > 0.0)
    {
        const float normalCloseness = sqr(sqr(max(0.0, dot(tap.normal, center.normal))));
        const float normalError = 1.0 - normalCloseness;
        normalWeight = max(0.0, (1.0 - normalError * NORMAL_WEIGHT));
    }

    if (PLANE_WEIGHT > 0.0)
    {
        // Change in position in camera space
        const float3 dq = center.position - tap.position;

        // How far away is this point from the original sample
        // in camera space? (Max value is unbounded)
        const float distance2 = dot(dq, dq);

        // How far off the expected plane (on the perpendicular) is this point? Max value is unbounded.
        const float planeError = max(abs(dot(dq, tap.normal)), abs(dot(dq, center.normal)));

        planeWeight = (distance2 < 0.0001) ? 1.0 :
            pow(max(0.0, 1.0 - 2.0 * PLANE_WEIGHT * planeError / sqrt(distance2)), 2.0);
    }

    return depthWeight * normalWeight * planeWeight;
}

// Separated bilateral filter (two passes, each with 2*Radius taps)
[numthreads(AMBIENT_OCCLUSION_TILE_SIZE, AMBIENT_OCCLUSION_TILE_SIZE, 1)]
void AOBilateralFilter(uint2 groupThreadId : SV_GroupThreadID, uint2 groupId : SV_GroupID)
{
    // Fetch the current pixel coordinate
    uint2 centerCoord = groupId * AMBIENT_OCCLUSION_TILE_SIZE + groupThreadId;
    centerCoord.x = centerCoord.x + (unity_StereoEyeIndex * _ScreenSize.x);

    float aoSum = 0.0;
    float wSum = 0.0;

    #if FINAL_PASS
    const uint2 passIncr = uint2(1, 0);
    #else
    const uint2 passIncr = uint2(0, 1);
    #endif

    const float sigma = 0.5 * _RaytracingDenoiseRadius;
    const int effectiveRadius = min(sigma * 2.0, _RaytracingDenoiseRadius);

    const BilateralData center = TapBilateralData(centerCoord);

    uint2 tapCoord = centerCoord - effectiveRadius * passIncr;
    for (int r = -effectiveRadius; r <= effectiveRadius; ++r, tapCoord += passIncr)
    {
        // Compute the weight (skip computation for the center)
        const float w = r ? gaussian(r, sigma) * ComputeBilateralWeight(center, TapBilateralData(tapCoord)) : 1.0;

        aoSum += LOAD_TEXTURE2D_X(_DenoiseInputTexture, tapCoord).x * w;
        wSum += w;
    }

    // Store the intermediate result
    float ao = aoSum / wSum;
    _DenoiseOutputTextureRW[COORD_TEXTURE2D_X(centerCoord)] = float4(ao, ao, ao, 1.0);
}
