
#pragma target 4.5
#define UNITY_MATERIAL_LIT
#pragma multi_compile _ WRITE_NORMAL_BUFFER

struct ps_input
{		
	float4 pos : SV_POSITION;
	float2 uv : TEXCOORD0;	
    #if VFX_SHADERGRAPH_HAS_UV1
    float4 uv1 : COLOR2;
    #endif
    #if VFX_SHADERGRAPH_HAS_UV2
    float4 uv2 : COLOR3;
    #endif
    #if VFX_SHADERGRAPH_HAS_UV3
    float4 uv3 : COLOR4;
    #endif
    #if VFX_SHADERGRAPH_HAS_COLOR
    float4 vertexColor : COLOR1;
    #endif
	#if USE_ALPHA_TEST || USE_FLIPBOOK_INTERPOLATION || VFX_USE_ALPHA_CURRENT
	// x: alpha threshold
	// y: frame blending factor
	// z: alpha
	// w: smoothness
	nointerpolation float4 builtInInterpolants : TEXCOORD1;
	#endif
	#if USE_FLIPBOOK_MOTIONVECTORS
	// x: motion vector scale u
	// y: motion vector scale v
	nointerpolation float2 builtInInterpolants2 : TEXCOORD3;
	#endif
	#if defined(WRITE_NORMAL_BUFFER) || SHADERGRAPH_NEEDS_NORMAL_DEPTHONLY
	float3 normal : TEXCOORD4;
	#if SHADERGRAPH_NEEDS_TANGENT_DEPTHONLY
	float4 tangent : TEXCOORD5;
	#endif
	#endif
	
	#if VFX_PASSDEPTH == VFX_PASSDEPTH_MOTION_VECTOR
	float4 cPosPrevious : TEXCOORD6;
	float4 cPosNonJiterred : TEXCOORD7;
	#endif
    ${VFXAdditionalInterpolantsDeclaration}
	
	UNITY_VERTEX_OUTPUT_STEREO
};

#define VFX_VARYING_PS_INPUTS ps_input
#define VFX_VARYING_POSCS pos
#define VFX_VARYING_ALPHA builtInInterpolants.z
#define VFX_VARYING_ALPHATHRESHOLD builtInInterpolants.x
#define VFX_VARYING_FRAMEBLEND builtInInterpolants.y
#define VFX_VARYING_MOTIONVECTORSCALE builtInInterpolants2.xy
#define VFX_VARYING_UV uv

#if VFX_PASSDEPTH == VFX_PASSDEPTH_MOTION_VECTOR
#define VFX_VARYING_VELOCITY_CPOS cPosNonJiterred
#define VFX_VARYING_VELOCITY_CPOS_PREVIOUS cPosPrevious
#endif

#if defined(WRITE_NORMAL_BUFFER) || SHADERGRAPH_NEEDS_NORMAL_DEPTHONLY
#define VFX_VARYING_NORMAL normal
#endif
#ifdef WRITE_NORMAL_BUFFER
#define VFX_VARYING_SMOOTHNESS builtInInterpolants.w
#endif
#if SHADERGRAPH_NEEDS_TANGENT_DEPTHONLY
#define VFX_VARYING_TANGENT tangent
#endif
		
${VFXBegin:VFXVertexAdditionalProcess}
${VFXHDRPLitFillVaryings}
${VFXEnd}
		
${VFXInclude("Shaders/ParticleMeshes/Pass.template")}	
#if VFX_PASSDEPTH == VFX_PASSDEPTH_MOTION_VECTOR
${VFXPassVelocityDefine}
#else
${VFXPassDepthDefine}
#endif
${VFXIncludeRP("VFXLit.template")}
			
${SHADERGRAPH_PIXEL_CODE_DEPTHONLY}
	
#if VFX_PASSDEPTH == VFX_PASSDEPTH_SELECTION
int _ObjectId;
int _PassValue;
#endif

#pragma fragment frag
void frag(ps_input i
#if USE_DOUBLE_SIDED
	, bool frontFace : SV_IsFrontFace
#endif

#if VFX_PASSDEPTH == VFX_PASSDEPTH_MOTION_VECTOR
	, out float4 outMotionVector : SV_Target0
	#ifdef WRITE_NORMAL_BUFFER
		, out float4 outNormalBuffer : SV_Target1
	#endif
#else
	#ifdef WRITE_NORMAL_BUFFER
		, out float4 outNormalBuffer : SV_Target0
	#elif VFX_PASSDEPTH == VFX_PASSDEPTH_SELECTION
		, out float4 outColor : SV_Target0
	#endif
#endif
	)
{
	UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(i);
	VFXTransformPSInputs(i);
	${VFXComputeNormalWS}
	
	#ifdef VFX_SHADERGRAPH
        ${VFXAdditionalInterpolantsPreparation}
        ${SHADERGRAPH_PIXEL_CALL_DEPTHONLY}
	
        float alpha = OUTSG.${SHADERGRAPH_PARAM_ALPHA};
    #else
	float alpha = VFXGetFragmentColor(i).a;
	#if HDRP_USE_BASE_COLOR_MAP_ALPHA
		alpha *= VFXGetTextureColor(VFX_SAMPLER(baseColorMap),i).a;
	#endif
    #endif
	VFXClipFragmentColor(alpha,i);
	
	#ifdef WRITE_NORMAL_BUFFER
        #ifndef VFX_SHADERGRAPH
            VFXComputePixelOutputToNormalBuffer(i,normalWS,uvData,outNormalBuffer);
        #else
           #if HAS_SHADERGRAPH_PARAM_NORMAL
               float3 n =  OUTSG.Normal_8;
               normalWS = mul(n,tbn);
           #endif
           SurfaceData surface = (SurfaceData)0;
           
           surface.normalWS = normalWS;
           
           EncodeIntoNormalBuffer(ConvertSurfaceDataToNormalData(surface), i.VFX_VARYING_POSCS.xy, outNormalBuffer);
        #endif
	#endif

	#if VFX_PASSDEPTH == VFX_PASSDEPTH_MOTION_VECTOR
		${VFXComputeOutputMotionVector}
		outMotionVector = encodedMotionVector;
	#elif VFX_PASSDEPTH == VFX_PASSDEPTH_SELECTION
		// We use depth prepass for scene selection in the editor, this code allow to output the outline correctly
		outColor = float4(_ObjectId, _PassValue, 1.0, 1.0);
	#elif VFX_PASSDEPTH == VFX_PASSDEPTH_ACTUAL
		//void
	#else
		#error VFX_PASSDEPTH undefined
	#endif
}
